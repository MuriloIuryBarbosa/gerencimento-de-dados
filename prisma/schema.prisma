// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário para Autenticação
model Usuario {
  id            Int       @id @default(autoincrement())
  nome          String
  email         String    @unique
  senha         String
  cargo         String?
  departamento  String?
  empresaId     Int?
  isAdmin       Boolean   @default(false)
  isSuperAdmin  Boolean   @default(false)
  ativo         Boolean   @default(true)
  ultimoAcesso  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  empresa       Empresa?  @relation(fields: [empresaId], references: [id])
  permissoes    UsuarioPermissao[]
  resetTokens   PasswordResetToken[]
  sessoes       SessaoUsuario[]

  @@map("usuarios")
}

// Empresa (estrutura básica)
model Empresa {
  id          Int       @id @default(autoincrement())
  nome        String    @unique
  cnpj        String?   @unique
  endereco    String?
  telefone    String?
  email       String?
  ativo       Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  usuarios    Usuario[]

  @@map("empresas")
}

// Permissões do Usuário
model UsuarioPermissao {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  permissao  String   // Ex: "read", "write", "admin", etc.
  recurso    String   // Ex: "usuarios", "cores", "skus", etc.
  createdAt  DateTime @default(now())

  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, permissao, recurso])
  @@map("usuario_permissoes")
}

// Token para Recuperação de Senha
model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())

  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}

// Sessão do Usuário (opcional, para controle de sessões ativas)
model SessaoUsuario {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  token      String   @unique
  expiresAt  DateTime
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@map("sessao_usuarios")
}

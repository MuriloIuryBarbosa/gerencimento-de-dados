# Configuração de Conexão com Banco de Dados
# Este arquivo contém as configurações para conectar ao banco DATALAKE

# =====================================================
# CONFIGURAÇÕES GERAIS
# =====================================================

# Ambiente (development, staging, production)
ENVIRONMENT=development

# =====================================================
# CONFIGURAÇÕES DO BANCO MYSQL/MARIADB
# =====================================================

# Host do banco de dados
DB_HOST=localhost

# Porta do banco (padrão MySQL: 3306, MariaDB: 3306)
DB_PORT=3306

# Nome do banco de dados
DB_NAME=datalake

# Usuário do banco
DB_USER=root

# Senha do banco (ALTERE PARA SUA SENHA REAL)
DB_PASSWORD=your_password_here

# =====================================================
# CONFIGURAÇÕES AVANÇADAS
# =====================================================

# Charset
DB_CHARSET=utf8mb4

# Collation
DB_COLLATION=utf8mb4_unicode_ci

# Connection timeout (segundos)
DB_TIMEOUT=30

# Maximum connections
DB_MAX_CONNECTIONS=10

# =====================================================
# CONFIGURAÇÕES DE SEGURANÇA
# =====================================================

# SSL (true/false)
DB_SSL=false

# Certificate path (se SSL=true)
# DB_SSL_CERT=/path/to/cert.pem
# DB_SSL_KEY=/path/to/key.pem
# DB_SSL_CA=/path/to/ca.pem

# =====================================================
# CONFIGURAÇÕES DE LOG
# =====================================================

# Log queries (true/false)
DB_LOG_QUERIES=false

# Log file path
DB_LOG_FILE=/var/log/datalake/db.log

# =====================================================
# EXEMPLOS DE CONEXÃO
# =====================================================

# PHP (PDO)
# $dsn = "mysql:host=$DB_HOST;port=$DB_PORT;dbname=$DB_NAME;charset=$DB_CHARSET";
# $pdo = new PDO($dsn, $DB_USER, $DB_PASSWORD);

# Node.js (mysql2)
# const mysql = require('mysql2');
# const connection = mysql.createConnection({
#   host: process.env.DB_HOST,
#   port: process.env.DB_PORT,
#   user: process.env.DB_USER,
#   password: process.env.DB_PASSWORD,
#   database: process.env.DB_NAME
# });

# Python (mysql-connector)
# import mysql.connector
# connection = mysql.connector.connect(
#     host=DB_HOST,
#     port=DB_PORT,
#     user=DB_USER,
#     password=DB_PASSWORD,
#     database=DB_NAME
# )

# Java (JDBC)
# String url = "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME +
#              "?useSSL=" + DB_SSL + "&serverTimezone=UTC";
# Connection conn = DriverManager.getConnection(url, DB_USER, DB_PASSWORD);

# =====================================================
# VARIÁVEIS DE AMBIENTE
# =====================================================

# Para usar em aplicações, defina estas variáveis de ambiente:
# export DB_HOST=localhost
# export DB_PORT=3306
# export DB_NAME=datalake
# export DB_USER=root
# export DB_PASSWORD=your_password_here

# =====================================================
# TESTE DE CONEXÃO
# =====================================================

# Comando para testar conexão:
# mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "SELECT 'Conexão OK' as status;"

# Verificar tabelas criadas:
# mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "SHOW TABLES;"

# =====================================================
# BACKUP E RESTORE
# =====================================================

# Fazer backup:
# mysqldump -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME > backup_$(date +%Y%m%d_%H%M%S).sql

# Restaurar backup:
# mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD $DB_NAME < backup_file.sql

# =====================================================
# MONITORAMENTO
# =====================================================

# Queries úteis para monitoramento:

# Verificar conexões ativas:
# SHOW PROCESSLIST;

# Verificar tamanho das tabelas:
# SELECT
#   table_name,
#   ROUND((data_length + index_length) / 1024 / 1024, 2) as size_mb
# FROM information_schema.tables
# WHERE table_schema = 'datalake'
# ORDER BY size_mb DESC;

# Verificar uso de índices:
# SELECT
#   object_schema,
#   object_name,
#   index_name,
#   count_read,
#   count_fetch,
#   count_insert,
#   count_update,
#   count_delete
# FROM performance_schema.table_io_waits_summary_by_index_usage
# WHERE object_schema = 'datalake'
# ORDER BY count_read DESC;
